#version 330 core

struct Light{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant; 
	float linear;
	float quadratic;
};



out vec4 color;

in vec3 Normal;
in vec3 FragmentPos;
in vec2 TexCoord;

uniform Light light;
uniform vec3 viewPos;
uniform sampler2D Texture;

void main()
{	
	vec3 norm = normalize(Normal);
	vec3 viewDirection = normalize(viewPos - FragmentPos);
	
	vec3 lightDirection = normalize(-light.direction);
	float difference = max(dot(norm, lightDirection), 0.0);
	vec3 reflectDirection = reflect(-lightDirection, norm);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0),10.0);
	vec3 ambient = light.ambient * vec3(texture(Texture, TexCoord));
	vec3 diffuse = light.diffuse * difference * vec3(texture(Texture, TexCoord));
	vec3 specular = light.specular * spec;
	
	color = vec4(ambient + diffuse + specular, 1.0);
}